include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - download
  - verify
  - build
  - scan

variables:
  ARCHITECTURES: "x86_64 armv7 aarch64"

download:
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache grep wget curl
  script:
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - |
      if [ ! -f "version.txt" ];
      then
          echo "${VERSION}" >> version.txt
      elif [ "$(cat version.txt)" != "${VERSION}" ];
      then
          VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
          mkdir -p files
          rm -rf files/*
          cd files
          for ARCH in ${ARCHITECTURES};
          do
              mkdir -p ${ARCH}
              cd ${ARCH}
              curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz"
              curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.sha256"
              curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.asc"
             cd ..
          done
          cd ..
      fi
  cache:
    key: alpine.downloads
    paths:
      - files/
      - version.txt

verify:
  stage: verify
  dependencies:
    - download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GPG_KEY: "0482D84022F52DF1C4E7CD43293ACD0907D9495A"
  before_script:
    - apk add --no-cache gnupg linux-headers grep wget
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - chmod +x helper
  script:
    - echo "${GPG_KEY}" > gpgkeys.txt
    - |
      if [ ! -f "keys.out" ];
      then
          for key in $(cat gpgkeys.txt);
          do
              gpg --keyserver pgp.mit.edu --recv-keys "${key}" ||
              gpg --keyserver keyserver.pgp.com --recv-keys "${key}" ||
              gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${key}"
              gpg --export > keys.out
          done
      elif [ "$(cat keysum.txt | md5sum -c)" ];
      then
          echo "Keys are imported."
      fi
    - md5sum gpgkeys.txt | tee keysum.txt
    - |
      for ARCH in ${ARCHITECTURES};
      do
          cd files/${ARCH}
          gpg --verify alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.asc alpine-minirootfs-${VERSION}-${ARCH}.tar.gz
          grep " alpine-minirootfs-${VERSION}-${ARCH}.tar.gz\$" alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.sha256 | sha256sum -c -
          cd ../..
          DOCKER_ARCH=$(./helper arch "${ARCH}")
          echo "Creating directory for ${DOCKER_ARCH}"
          mkdir -p "files/${DOCKER_ARCH}"
          mv files/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz "files/${DOCKER_ARCH}/$alpine-minirootfs.tar.gz"
          rm -rf files/${ARCH}
      done
  cache:
    key: alpine.gpg.keyring
    paths:
      - keys.out
      - keysum.txt
  artifacts:
    paths:
      - keys.out
      - files/
    expire_in: 1 day

build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker/buildx:latest
  dependencies:
    - download
  before_script:
    - apk add --no-cache grep wget
  script:
    - chmod +x helper
    - TAG_STRING=$(./helper jitesoft/alpine,${CI_REGISTRY_IMAGE},quay.io/jitesoft/alpine test,test2
    - echo ${TAG_STRING}
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
    - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 --progress plain --push ${TAG_STRING} --build-arg VERSION_SHORT=${VERSION_SHORT} --build-arg VERSION=${VERSION} .
    - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 --progress plain --push -t ${CI_REGISTRY_IMAGE}/buildbase:latest -f buildbase.dockerfile .
  tags:
    - jitesoft
    - buildx

scan:
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:latest"
    GIT_STRATEGY: none

scan:buildbase:
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/buildbase:latest"
    GIT_STRATEGY: none
