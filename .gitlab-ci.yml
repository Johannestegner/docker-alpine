include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - download
  - verify
  - build
  - scan

variables:
  ARCHITECTURES: "x86_64 armv7 aarch64 ppc64le s390x x86"

download:
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache grep wget curl
  script:
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
    - mkdir -p files/tmp
    - rm -rf files/*
    - cd files
    - |
      for ARCH in ${ARCHITECTURES};
      do
          mkdir -p ${ARCH}
          cd ${ARCH}
          curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz"
          curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.sha256"
          curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.asc"
         cd ..
      done
      cd ..
  artifacts:
    paths:
      - files/*
    expire_in: 1 day

verify:
  stage: verify
  dependencies:
    - download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GPG_KEY: "0482D84022F52DF1C4E7CD43293ACD0907D9495A"
  before_script:
    - apk add --no-cache gnupg grep wget
    - echo "${GPG_KEY}" > gpgkeys.txt
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh -O helper
    - chmod +x helper
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - gpg --list-keys ${GPG_KEY} || (gpg --keyserver pgp.mit.edu --recv-keys "${GPG_KEY}" || gpg --keyserver keyserver.pgp.com --recv-keys "${GPG_KEY}" || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${GPG_KEY}")
    - gpg --export > keys.out
    - |
      for ARCH in ${ARCHITECTURES};
      do
          cd files/${ARCH}
          gpg --verify alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.asc alpine-minirootfs-${VERSION}-${ARCH}.tar.gz
          grep " alpine-minirootfs-${VERSION}-${ARCH}.tar.gz\$" alpine-minirootfs-${VERSION}-${ARCH}.tar.gz.sha256 | sha256sum -c -
          cd ../..
          DOCKER_ARCH=$(./helper arch "${ARCH}")
          echo "Creating directory for ${DOCKER_ARCH}"
          mkdir -p "files/${DOCKER_ARCH}"
          mv files/${ARCH}/alpine-minirootfs-${VERSION}-${ARCH}.tar.gz "files/${DOCKER_ARCH}/alpine-minirootfs.tar.gz"
          rm -rf files/${ARCH}
      done
  cache:
    key: alpine.gpg.keyring
    paths:
      - keys.out
  artifacts:
    paths:
      - files/*
    expire_in: 1 day

build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker/buildx:latest
  dependencies:
    - verify
  before_script:
    - apk add --no-cache grep wget
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh -O helper
    - chmod +x helper
  script:
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
    - TAGS="latest,${VERSION},${VERSION_SHORT}"
    - TAG_STRING=$(./helper "jitesoft/alpine,${CI_REGISTRY_IMAGE}" "${TAGS}")
    - ARCH_LIST=$(./helper archlist ${ARCHITECTURES})
    - echo "Building for following architectures ${ARCH_LIST}"
    - docker buildx build --platform ${ARCH_LIST} --progress plain --push ${TAG_STRING} --build-arg VERSION_SHORT=${VERSION_SHORT} --build-arg VERSION=${VERSION} .
    - docker pull ${CI_REGISTRY_IMAGE}:latest
    - |
      for tag in $(echo "${TAGS}" | sed "s/,/ /g");
      do
        docker tag ${CI_REGISTRY_IMAGE}:latest quay.io/jitesoft/alpine:${tag}
        docker push quay.io/jitesoft/alpine:${tag}
      done
  tags: [ jitesoft, buildx, amd64, arm7, arm64, x86, ppc64le, s390x ]

scan:
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:latest"
    GIT_STRATEGY: none
