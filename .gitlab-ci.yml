include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - download
  - build
  - scan

download:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: download
  variables:
    GPG_KEY: "0482D84022F52DF1C4E7CD43293ACD0907D9495A"
    GIT_STRATEGY: none
    ARC: x86_64
  before_script:
    - apk add --no-cache gnupg curl grep
    - |
        gpg --keyserver pgp.mit.edu --recv-keys "${GPG_KEY}" ||
        gpg --keyserver keyserver.pgp.com --recv-keys "${GPG_KEY}" ||
        gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${GPG_KEY}"
  script:
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARC}/alpine-minirootfs-${VERSION}-${ARC}.tar.gz"
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARC}/alpine-minirootfs-${VERSION}-${ARC}.tar.gz.sha256"
    - curl -OsS "https://ftp.acc.umu.se/mirror/alpinelinux.org/v${VERSION_SHORT}/releases/${ARC}/alpine-minirootfs-${VERSION}-${ARC}.tar.gz.asc"
    - gpg --verify alpine-minirootfs-${VERSION}-${ARC}.tar.gz.asc alpine-minirootfs-${VERSION}-${ARC}.tar.gz
    - grep " alpine-minirootfs-${VERSION}-${ARC}.tar.gz\$" alpine-minirootfs-${VERSION}-${ARC}.tar.gz.sha256 | sha256sum -c -
    - mv alpine-minirootfs-${VERSION}-${ARC}.tar.gz alpine-minirootfs.tar.gz
  artifacts:
    paths:
      - alpine-minirootfs.tar.gz
    expire_in: 1 days

build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker/buildx:latest
  variables:
    DOCKER_BUILDKIT: 1
  dependencies:
    - download
  before_script:
    - apk add --no-cache grep
  script:
    - VERSION=$(wget -qO- https://alpinelinux.org/downloads/ | grep -oP "(?<=<strong>)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}')
    - VERSION_SHORT=$(echo ${VERSION} | grep -oP '(\d+[.]\d+)')
    - docker buildx build --platform linux/arm,linux/arm64,linux/amd64  --output type=image -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} --build-arg VERSION_SHORT=${VERSION_SHORT} --build-arg VERSION=${VERSION} .
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} --build-arg VERSION_SHORT=${VERSION_SHORT} --build-arg VERSION=${VERSION} .
    - TAGS="${VERSION} latest ${VERSION_SHORT}"
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} jitesoft/alpine:test
    - docker push jitesoft/alpine:test
    - |
      for tag in ${TAGS}; do
        #docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} jitesoft/alpine:${tag}
        #docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} ${CI_REGISTRY_IMAGE}:${tag}
        #docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} quay.io/jitesoft/alpine:${tag}
        #docker push jitesoft/alpine:${tag}
        #docker push quay.io/jitesoft/alpine:${tag}
        #docker push ${CI_REGISTRY_IMAGE}:${tag}
      done
    - docker build -t ${CI_REGISTRY_IMAGE}/buildbase:${CI_COMMIT_SHA} -f buildbase.dockerfile .
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}/buildbase:${CI_COMMIT_SHA} ${CI_REGISTRY_IMAGE}/buildbase:${tag}
        docker push ${CI_REGISTRY_IMAGE}/buildbase:${tag}
      done
  tags:
    - jitesoft
    - buildx

scan:
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:latest"
    GIT_STRATEGY: none

scan:buildbase:
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/buildbase:latest"
    GIT_STRATEGY: none
